import { Component } from '@angular/core';
import { LitigeService } from '../services/litige.service';

@Component({
  selector: 'app-litige',
  templateUrl: './litige.component.html',
  styleUrls: ['./litige.component.css']
})
export class LitigeComponent {
  statusInput: string = '';
  reasonInput: string = '';
  clusterResult: number | null = null;
  errorMessage: string = '';

  // üéØ Liste des raisons r√©cup√©r√©es depuis ton tableau
  reasonOptions: string[] = [
    'Non-conformit√©',
    'Livraison en retard',
    'Erreur de facturation',
    'Produit d√©fectueux',
    'Retard de livraison',
    'Montant surfactur√©',
    'Erreur de tarification',
    'Marchandises endommag√©es',
    '√âcart de quantit√©',
    'Duplication de facture',
    'Documentation manquante',
    'Conditions peu claires',
    '√âcart de facture',
    'Changements non approuv√©s',
    'Produit incorrect',
    'Probl√®me de documentation',
    'Montant erron√©',
    'Mauvaise qualit√©',
    'Article non livr√©',
    'Facture en double',
    'Erreur de stock',
    'Conditions non respect√©es',
    'Manque de signature',
    'Late delivery',
    'Missing documentation',
    'Invoice duplication',
    'Invoice discrepancy',
    'Incorrect pricing',
    'Overcharged amount',
    'D√©faut de conformit√©',
    'Quantity mismatch',
    'Damaged goods',
    'Unapproved changes',
    'Unclear terms',
    'Livraison incompl√®te'
  ];

  constructor(private litigeService: LitigeService) {}

  predictCluster() {
    this.errorMessage = '';
    const payload = {
      Status: this.statusInput,
      Reason: this.reasonInput
    };

    this.litigeService.predictLitigeCluster(payload).subscribe({
      next: (response) => {
        this.clusterResult = response.ClusterPrediction;
      },
      error: (error) => {
        this.errorMessage = "Erreur lors de la pr√©diction.";
        console.error(error);
      }
    });
  }
}
